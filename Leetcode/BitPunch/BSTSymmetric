class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def create_symmetric_tree():
    # Level 3
    node7 = TreeNode(4)
    node8 = TreeNode(4)
    node5 = TreeNode(3)
    node6 = TreeNode(3)

    # Level 2
    node3 = TreeNode(2, node5, node6)
    node4 = TreeNode(2, node7, node8)

    # Level 1 (root)
    root = TreeNode(1, node3, node4)

    return root

def print_tree_preorder(node):
    if not node:
        return
    print(node.value, end=" ")
    print_tree_preorder(node.left)
    print_tree_preorder(node.right)

def isMirror(t1,t2):
    if t1 is None and t2 is None:
        return True 
    elif t1 is None and t2 is not None:
        return False
    return t1 == t2 and isMirror(t1.left,t2.right) and isMirror(t1.right,t2.left)
        

def isSymetric(symmetric_tree):
    if symmetric_tree is None:
        return True
    return isMirror(symmetric_tree.left,symmetric_tree.right)
    

# Create the symmetric binary tree
symmetric_tree = create_symmetric_tree()

# Print the tree in preorder to confirm structure
print("Preorder traversal of the symmetric tree:")
print_tree_preorder(symmetric_tree)

